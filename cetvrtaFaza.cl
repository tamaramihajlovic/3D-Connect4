(defun factsStub (tabla i j a)
  (cond ((= j a) '())
        (t (progn
                 (cons (append (list i) (append (list (- (- a j) 1)) (list (nth j (cadr (nth i tabla)))))) (factsStub tabla i (+ j 1) a))
             ))))

(defun facts (tabla i a)
  (cond ((= i (length tabla)) '())
        (t (append (factsStub tabla i 0 a) (facts tabla (+ i 1) a)))))

(defun proceniStanje( dubina iksOks stanje a)
  (if (= a 4)
      (progn
        (prepare-knowledge (rules4) (facts stanje 0 a) 3)
        (if (eq iksOks 'o)
        (+ 
         (* (count-results '(stubic3x)) 200) 
         (* (count-results '(redx3x)) 190) 
         (* (count-results '(redz3x)) 180)
         (* (count-results '(dijagonalaz3x)) 170)
         (* (count-results '(stubic3o)) 50) 
         (* (count-results '(stubic2o)) 40) 
         (* (count-results '(stubic1o)) 30)  
         (random 10))
        (+ 
         (* (count-results '(stubic3o)) 200) 
         (* (count-results '(redx3o)) 190) 
         (* (count-results '(redz3o)) 180)    
         (* (count-results '(dijagonalaz3o)) 170)  
         (random 10)))
        )
    (progn
      (prepare-knowledge (rules6) (facts stanje 0 a) 3)
        (if (eq iksOks 'o)
         (+ 
          (* (count-results '(stubicsest3x)) 100)
          (* (count-results '(redzsest3x)) 95)
          (* (count-results '(redxsest3x)) 90)
          (* (count-results '(dijagonalazsest3x)) 85)
          (* (count-results '(dijagonalaxsest3x)) 80)
          (* (count-results '(glavnasest3x)) 75)
          (* (count-results '(maladijagonala3x)) 70)
          (* (count-results '(srednjadijagonala3x)) 65)
          (* (count-results '(dvax)) 30)
          (* (count-results '(jedanx)) 20)
          (random 10))
         (+ 
          (* (count-results '(stubicsest3o)) 100)
          (* (count-results '(redzsest3o)) 95)
          (* (count-results '(redxsest3x)) 90)
          (* (count-results '(dijagonalazsest3o)) 85)
          (* (count-results '(dijagonalaxsest3o)) 80)
          (* (count-results '(glavnasest3o)) 75)
           (* (count-results '(maladijagonala3o)) 70)
          (* (count-results '(srednjadijagonala3o)) 65)
          (* (count-results '(dvao)) 30)
          (* (count-results '(jedano)) 20)
          (random 10))))))


(defun novaTabla (tabla n iksOks a)
  (setq tabla1 (copy-tree tabla))
  (if (< (nth 2 (assoc n tabla1)) a)
      (progn
          (setf (nth 2 (assoc n tabla1)) (+ (nth 2 (assoc n tabla1)) 1))
        (setf (nth (- a (nth 2 (assoc n tabla1))) (cadr (assoc n tabla1))) iksOks)))
  ;(setq tabla1 (cons n tabla1))
  (return-from novaTabla tabla1))

(defun listaPotencijalnihStanja (a tabla iksOks prazni)  
        (if (not (null prazni))
            (cons (novaTabla tabla (car prazni) iksOks a)  
                  (listaPotencijalnihStanja a tabla iksOks (cdr prazni)))))


(defun max-value (stanje dubina start iksOks a alfa beta)
  (let ((lp (listaPotencijalnihStanja a stanje iksOks (sledbenici stanje a)))
        (f 'maxStanje))
    (cond ((or (zerop dubina) (= 1 (length lp)))
           (list stanje (or (null (sledbenici stanje a)) (proceniStanje  dubina iksOks stanje a))))
          (start (progn
                   (setq best (list (last lp) -1000))
                   (tagbody (mapcar (lambda (x) (progn
                                         (setq val (min-value x (1- dubina) '() iksOks a alfa beta))
                                         (if (< (nth 1 best) (nth 1 val)) (setq best val))
                                         (setq alfa (max alfa (nth 1 best)))
                                         (if (<= beta alfa) (go break3))
                                         )) lp)
                   break3
                   (return-from max-value best))
                   ))
          (t (cons stanje (cdr (apply f (list (mapcar (lambda (x) (min-value x (1- dubina)  '() iksOks a alfa beta)) lp)))))))))


(defun min-value (stanje dubina start iksOks a alfa beta)
  (let ((lp (listaPotencijalnihStanja a stanje iksOks (sledbenici stanje a)))
        (f 'minStanje))
    (cond ((or (zerop dubina) (= 1 (length lp)))
           (list stanje (or (null (sledbenici stanje a)) (proceniStanje  dubina iksOks stanje a))))
                    (start (progn
                   (setq best (list (last lp) 1000))
                   (tagbody (mapcar (lambda (x) (progn
                                         (setq val (max-value x (1- dubina) '() iksOks a alfa beta))
                                         (if (> (nth 1 best) (nth 1 val)) (setq best val))
                                         (setq beta (min beta (nth 1 best)))
                                         (if (<= beta alfa) (go break))
                                                  )) lp)
                   break 
                   (return-from min-value best))
                   ))
          (t (cons stanje (cdr (apply f (list (mapcar (lambda (x) (max-value x (1- dubina)  '() iksOks a alfa beta)) lp)))))))))


(defun min-stanje-i (lsv stanje-vrednost)
  (cond ((null lsv) stanje-vrednost)
        ((< (cadar lsv) (cadr stanje-vrednost))
         (min-stanje-i (cdr lsv) (car lsv)))
        (t (min-stanje-i (cdr lsv) stanje-vrednost))))




(defun minStanje (lsv)
 (min-stanje-i (cdr lsv) (car lsv))) 


(defun maxStanje (lsv)
  (max-stanje-i (cdr lsv) (car lsv)))


(defun max-stanje-i (lsv stanje-vrednost)
 (cond ((null lsv) stanje-vrednost)
 ((> (cadar lsv) (cadr stanje-vrednost))
  (max-stanje-i (cdr lsv) (car lsv)))
  (t (max-stanje-i (cdr lsv) stanje-vrednost))))


(defun main()
  (format t "*-*-*-*-*-*DOBRODOSLI*-*-*-*-*-*~%")
  (format t "Unesite dimenzije igre: ~%")
  (setq a (read))
            (loop
                (if (proveriDimenziju) 
                    (return ) 
                       ( progn
			(format t "~%Uneta je nevalidna dimenzija. Unesite zeljenu dimenziju ponovo.~%")
				(setq a (read)))))
  (setq tabla '())
  (setq kolona '())
  (setq tabla (dodajTablu tabla 0 a kolona))
  (format t "Ovako ce izlgledati vasa igra: ~%")
  (crtaj tabla a)
  (setq covek '())
  (setq racunar '()) 
  (format t "~%Da li zelite da igrate prvi? (DA/NE): ")
   (let ((odg (read))) (cond ((equal odg 'DA)
        (progn
         (setf covek 'X)
         (setf racunar 'O)
         (format t "Izbor uspesan. Prvi igrate Vi! ")))
         ((equal odg 'NE)
               (progn
                    (setf covek 'O)
                    (setf racunar 'X)
                    (format t "Izbor uspesan.Prvi igra racunar! "))))
     (format t "Vasa oznaka je ~X !" covek)
     (format t "~%"))
  (setq prvi '())
  (setq drugi '())
    (if (eq 'X covek) 
          (progn
            (setq prvi covek)
            (setq drugi racunar))
      (progn
            (setq prvi racunar)
            (setq drugi covek)))
  (setq s '())
  
  (setq ListRacunar '())
  (setq ListCovek '())
  (setq ListRacunar (homogenaLista racunar a ListRacunar))
  (setq ListCovek (homogenaLista covek a ListCovek))
  (igraj a (* a a a) tabla prvi drugi racunar s)
  
  (setq poeniRacunar 0)
    (setq poeniCovek 0)
    (if (= a 4)
        (progn 
          (setq poeniRacunar (proveraRezultataCetiri a tabla poeniRacunar racunar ListRacunar))
          (setq poeniCovek (proveraRezultataCetiri a tabla poeniCovek covek ListCovek))
          )
         (progn 
          (setq poeniRacunar (proveraRezultataSest a tabla poeniRacunar racunar covek ListRacunar))
          (setq poeniCovek (proveraRezultataSest a tabla poeniCovek covek racunar ListCovek))
          )
        )
  (format t "~%Racunar: ~D" poeniRacunar)
  (format t " Covek: ~D" poeniCovek)
  
  (if (> poeniCovek poeniRacunar)
      (format t "~%POBEDILI STE!:) ~%")
    (if (= poeniCovek poeniRacunar)
        (format t "~%NERESENO!:| ~%")
      (format t "~%IZGUBILI STE!:( ~%")))
  )



(defun proveraRezultataSest (a tabla poeni iksOks suprotno list)
  
  (setq poeni (* (jedanStubic a 0 tabla poeni list) 3)) ;6:0
  
  (setq list (append (cdr list) (list suprotno))) ;5:1
  (setq poeni (+ poeni (* (jedanStubic a 0 tabla 0 list) 2)))
  
  (setq list (append (list suprotno) (cdr list))) ;1:5
  (setq poeni (+ poeni (* (jedanStubic a 0 tabla 0 list) 2)))
  
  (setq list (append (cddr list) (list suprotno suprotno))) ;4:2
  (setq poeni (jedanStubic a 0 tabla poeni list))
  
  (setq list (append (list suprotno suprotno) (cddr list))) ;2:4
  (setq poeni (jedanStubic a 0 tabla poeni list))
  
  (setq list (append (cddr list) (list suprotno iksOks))) ;4:1:1
  (setq poeni (jedanStubic a 0 tabla poeni list))
  
  (setq list (append (list iksOKs suprotno) (cddr list))) ;1:1:4
  (setq poeni (jedanStubic a 0 tabla poeni list))
  
  (setq list (append (list suprotno) (append (cddr list) (list suprotno)))) ;1:4:1
  (setq poeni (jedanStubic a 0 tabla poeni list))  
  
       (setq poeni (Petica1 a poeni iksOks tabla))
       (setq poeni (Petica2 a poeni iksOks tabla))
       (setq poeni (Trojka1 a poeni iksOks tabla))
       (setq poeni (Trojka2 a poeni iksOks tabla))
       (setq poeni (dijagonalaIstiNivo1Sest a poeni iksOks tabla 0))
       (setq poeni (dijagonalaIstiNivo2Sest a poeni iksOks tabla 0))
       (setq poeni (redIstiNivo1Sest a poeni iksOks tabla 0 0))
       (setq poeni (redIstiNivo2Sest a poeni iksOks tabla 0 0))
       (setq poeni (redDijagonala1Sest a poeni iksOks tabla 0))
       (setq poeni (redDijagonala2Sest a poeni iksOks tabla 0 ))
       (setq poeni (redIstiDijagonala3Sest a poeni iksOks tabla 0))
       (setq poeni (redIstiDijagonala4Sest a poeni iksOks tabla 0))
  (setq poeni (prviNoviSlucaj a poeni iksOks tabla 0))
  (setq poeni (drugiNoviSlucaj a poeni iksOks tabla 0))
  (setq poeni (treciNoviSlucaj a poeni iksOks tabla 0))
  (setq poeni (cetvrtiNoviSlucaj a poeni iksOks tabla 0))
  (setq poeni (petiNoviSlucaj a poeni iksOks tabla))
  (setq poeni (sestiNoviSlucaj a poeni iksOks tabla))
  (setq poeni (sedmiNoviSlucaj a poeni iksOks tabla))
  (setq poeni (osmiNoviSlucaj a poeni iksOks tabla))
  
  (return-from proveraRezultataSest poeni)
  )

(defun Petica1 (a poeni iksOks tabla)
      (if (and (if (equalp (nth 0 (nth 1 (assoc 0 tabla))) iksOks) t)
           (and (if (equalp (nth 1 (nth 1 (assoc 7 tabla))) iksOks) t)
               (and (if (equalp (nth 2 (nth 1 (assoc 14 tabla))) iksOks) t)
                    (and (if (equalp (nth 3 (nth 1 (assoc 21 tabla))) iksOks) t)
                         (and (if (equalp (nth 4 (nth 1 (assoc 28 tabla))) iksOks) t)
                              (if (equalp (nth 5 (nth 1 (assoc 35 tabla))) iksOks) t))))))
          (setq poeni (+ poeni 3)))
  (if (and (if (equalp (nth 0 (nth 1 (assoc 0 tabla))) iksOks) t)
           (and (if (equalp (nth 1 (nth 1 (assoc 7 tabla))) iksOks) t)
               (and (if (equalp (nth 2 (nth 1 (assoc 14 tabla))) iksOks) t)
                    (if (equalp (nth 3 (nth 1 (assoc 21 tabla))) iksOks) t))))
      (setq poeni (+ poeni 1)))
  (if (and (if (equalp (nth 0 (nth 1 (assoc 7 tabla))) iksOks) t)
           (and (if (equalp (nth 1 (nth 1 (assoc 14 tabla))) iksOks) t)
               (and (if (equalp (nth 2 (nth 1 (assoc 21 tabla))) iksOks) t)
                    (if (equalp (nth 3 (nth 1 (assoc 28 tabla))) iksOks) t))))
      (setq poeni (+ poeni 1)))
  (if (and (if (equalp (nth 0 (nth 1 (assoc 14 tabla))) iksOks) t)
           (and (if (equalp (nth 1 (nth 1 (assoc 21 tabla))) iksOks) t)
               (and (if (equalp (nth 2 (nth 1 (assoc 28 tabla))) iksOks) t)
                    (if (equalp (nth 3 (nth 1 (assoc 35 tabla))) iksOks) t))))
      (setq poeni (+ poeni 1)))
  (if (and (if (equalp (nth 0 (nth 1 (assoc 0 tabla))) iksOks) t)
           (and (if (equalp (nth 1 (nth 1 (assoc 7 tabla))) iksOks) t)
               (and (if (equalp (nth 2 (nth 1 (assoc 14 tabla))) iksOks) t)
                    (and (if (equalp (nth 3 (nth 1 (assoc 21 tabla))) iksOks) t)
                         (if (equalp (nth 4 (nth 1 (assoc 28 tabla))) iksOks) t)))))
      (setq poeni (+ poeni 2)))
  (if (and (if (equalp (nth 0 (nth 1 (assoc 7 tabla))) iksOks) t)
           (and (if (equalp (nth 1 (nth 1 (assoc 14 tabla))) iksOks) t)
               (and (if (equalp (nth 2 (nth 1 (assoc 21 tabla))) iksOks) t)
                    (and (if (equalp (nth 3 (nth 1 (assoc 28 tabla))) iksOks) t)
                         (and (if (equalp (nth 4 (nth 1 (assoc 35 tabla))) iksOks) t))))))
                                      (setq poeni (+ poeni 2)))
  
  (return-from Petica1 poeni)
  ) 

(defun Petica2 (a poeni iksOks tabla)
   (if (and (if (equalp (nth 5 (nth 1 (assoc 0 tabla))) iksOks) t)
           (and (if (equalp (nth 4 (nth 1 (assoc 7 tabla))) iksOks) t)
               (and (if (equalp (nth 3 (nth 1 (assoc 14 tabla))) iksOks) t)
                    (and (if (equalp (nth 2 (nth 1 (assoc 21 tabla))) iksOks) t)
                         (and (if (equalp (nth 1 (nth 1 (assoc 28 tabla))) iksOks) t)
                              (if (equalp (nth 0 (nth 1 (assoc 35 tabla))) iksOks) t))))))
          (setq poeni (+ poeni 3)))
  (if (and (if (equalp (nth 3 (nth 1 (assoc 0 tabla))) iksOks) t)
           (and (if (equalp (nth 2 (nth 1 (assoc 7 tabla))) iksOks) t)
               (and (if (equalp (nth 1 (nth 1 (assoc 14 tabla))) iksOks) t)
                    (if (equalp (nth 0 (nth 1 (assoc 21 tabla))) iksOks) t))))
      (setq poeni (+ poeni 1)))
  (if (and (if (equalp (nth 4 (nth 1 (assoc 7 tabla))) iksOks) t)
           (and (if (equalp (nth 3 (nth 1 (assoc 14 tabla))) iksOks) t)
               (and (if (equalp (nth 2 (nth 1 (assoc 21 tabla))) iksOks) t)
                    (if (equalp (nth 1 (nth 1 (assoc 28 tabla))) iksOks) t))))
      (setq poeni (+ poeni 1)))
  (if (and (if (equalp (nth 5 (nth 1 (assoc 14 tabla))) iksOks) t)
           (and (if (equalp (nth 4 (nth 1 (assoc 21 tabla))) iksOks) t)
               (and (if (equalp (nth 3 (nth 1 (assoc 28 tabla))) iksOks) t)
                    (if (equalp (nth 2 (nth 1 (assoc 35 tabla))) iksOks) t))))
      (setq poeni (+ poeni 1)))
  (if (and (if (equalp (nth 5 (nth 1 (assoc 0 tabla))) iksOks) t)
           (and (if (equalp (nth 4 (nth 1 (assoc 7 tabla))) iksOks) t)
               (and (if (equalp (nth 3 (nth 1 (assoc 14 tabla))) iksOks) t)
                    (and (if (equalp (nth 2 (nth 1 (assoc 21 tabla))) iksOks) t)
                         (if (equalp (nth 1 (nth 1 (assoc 28 tabla))) iksOks) t)))))
      (setq poeni (+ poeni 2)))
  (if (and (if (equalp (nth 4 (nth 1 (assoc 7 tabla))) iksOks) t)
           (and (if (equalp (nth 3 (nth 1 (assoc 14 tabla))) iksOks) t)
               (and (if (equalp (nth 2 (nth 1 (assoc 21 tabla))) iksOks) t)
                    (and (if (equalp (nth 1 (nth 1 (assoc 28 tabla))) iksOks) t)
                         (and (if (equalp (nth 0 (nth 1 (assoc 35 tabla))) iksOks) t))))))
                                      (setq poeni (+ poeni 2)))
  
  (return-from Petica2 poeni)
  ) 

(defun Trojka1(a poeni iksOks tabla)
  (if (and (if (equalp (nth 0 (nth 1 (assoc 5 tabla))) iksOks) t)
           (and (if (equalp (nth 1 (nth 1 (assoc 10 tabla))) iksOks) t)
               (and (if (equalp (nth 2 (nth 1 (assoc 15 tabla))) iksOks) t)
                    (and (if (equalp (nth 3 (nth 1 (assoc 20 tabla))) iksOks) t)
                         (and (if (equalp (nth 4 (nth 1 (assoc 25 tabla))) iksOks) t)
                            (if (equalp (nth 5 (nth 1 (assoc 30 tabla))) iksOks) t))))))
      
      (setq poeni (+ poeni 3)))
  (if (and (if (equalp (nth 0 (nth 1 (assoc 5 tabla))) iksOks) t)
           (and (if (equalp (nth 1 (nth 1 (assoc 10 tabla))) iksOks) t)
               (and (if (equalp (nth 2 (nth 1 (assoc 15 tabla))) iksOks) t)
                    (if (equalp (nth 3 (nth 1 (assoc 20 tabla))) iksOks) t))))
      (setq poeni (+ poeni 1)))
  (if (and (if (equalp (nth 0 (nth 1 (assoc 10 tabla))) iksOks) t)
           (and (if (equalp (nth 1 (nth 1 (assoc 15 tabla))) iksOks) t)
               (and (if (equalp (nth 2 (nth 1 (assoc 20 tabla))) iksOks) t)
                    (if (equalp (nth 3 (nth 1 (assoc 25 tabla))) iksOks) t))))
      (setq poeni (+ poeni 1)))
  (if (and (if (equalp (nth 0 (nth 1 (assoc 15 tabla))) iksOks) t)
           (and (if (equalp (nth 1 (nth 1 (assoc 20 tabla))) iksOks) t)
               (and (if (equalp (nth 2 (nth 1 (assoc 25 tabla))) iksOks) t)
                    (if (equalp (nth 3 (nth 1 (assoc 30 tabla))) iksOks) t))))
      (setq poeni (+ poeni 1)))
  (if (and (if (equalp (nth 0 (nth 1 (assoc 5 tabla))) iksOks) t)
           (and (if (equalp (nth 1 (nth 1 (assoc 10 tabla))) iksOks) t)
               (and (if (equalp (nth 2 (nth 1 (assoc 15 tabla))) iksOks) t)
                    (and (if (equalp (nth 3 (nth 1 (assoc 20 tabla))) iksOks) t)
                         (if (equalp (nth 4 (nth 1 (assoc 25 tabla))) iksOks) t)))))
      (setq poeni (+ poeni 2)))
  (if (and (if (equalp (nth 0 (nth 1 (assoc 10 tabla))) iksOks) t)
           (and (if (equalp (nth 1 (nth 1 (assoc 15 tabla))) iksOks) t)
               (and (if (equalp (nth 2 (nth 1 (assoc 20 tabla))) iksOks) t)
                    (and (if (equalp (nth 3 (nth 1 (assoc 25 tabla))) iksOks) t)
                         (and (if (equalp (nth 4 (nth 1 (assoc 30 tabla))) iksOks) t))))))
                                      (setq poeni (+ poeni 2)))

  (return-from Trojka1 poeni)
  )


(defun Trojka2(a poeni iksOks tabla)
  (if (and (if (equalp (nth 5 (nth 1 (assoc 5 tabla))) iksOks) t)
           (and (if (equalp (nth 4 (nth 1 (assoc 10 tabla))) iksOks) t)
               (and (if (equalp (nth 3 (nth 1 (assoc 15 tabla))) iksOks) t)
                    (and (if (equalp (nth 2 (nth 1 (assoc 20 tabla))) iksOks) t)
                         (and (if (equalp (nth 1 (nth 1 (assoc 25 tabla))) iksOks) t)
                            (if (equalp (nth 0 (nth 1 (assoc 30 tabla))) iksOks) t))))))
      
      (setq poeni (+ poeni 3)))
  (if (and (if (equalp (nth 3 (nth 1 (assoc 5 tabla))) iksOks) t)
           (and (if (equalp (nth 2 (nth 1 (assoc 10 tabla))) iksOks) t)
               (and (if (equalp (nth 1 (nth 1 (assoc 15 tabla))) iksOks) t)
                    (if (equalp (nth 0 (nth 1 (assoc 20 tabla))) iksOks) t))))
      (setq poeni (+ poeni 1)))
  (if (and (if (equalp (nth 4 (nth 1 (assoc 10 tabla))) iksOks) t)
           (and (if (equalp (nth 3 (nth 1 (assoc 15 tabla))) iksOks) t)
               (and (if (equalp (nth 2 (nth 1 (assoc 20 tabla))) iksOks) t)
                    (if (equalp (nth 1 (nth 1 (assoc 25 tabla))) iksOks) t))))
      (setq poeni (+ poeni 1)))
  (if (and (if (equalp (nth 5 (nth 1 (assoc 15 tabla))) iksOks) t)
           (and (if (equalp (nth 4 (nth 1 (assoc 20 tabla))) iksOks) t)
               (and (if (equalp (nth 3 (nth 1 (assoc 25 tabla))) iksOks) t)
                    (if (equalp (nth 2 (nth 1 (assoc 30 tabla))) iksOks) t))))
      (setq poeni (+ poeni 1)))
  (if (and (if (equalp (nth 5 (nth 1 (assoc 5 tabla))) iksOks) t)
           (and (if (equalp (nth 4 (nth 1 (assoc 10 tabla))) iksOks) t)
               (and (if (equalp (nth 3 (nth 1 (assoc 15 tabla))) iksOks) t)
                    (and (if (equalp (nth 2 (nth 1 (assoc 20 tabla))) iksOks) t)
                         (if (equalp (nth 1 (nth 1 (assoc 25 tabla))) iksOks) t)))))
      (setq poeni (+ poeni 2)))
  (if (and (if (equalp (nth 4 (nth 1 (assoc 10 tabla))) iksOks) t)
           (and (if (equalp (nth 3 (nth 1 (assoc 15 tabla))) iksOks) t)
               (and (if (equalp (nth 2 (nth 1 (assoc 20 tabla))) iksOks) t)
                    (and (if (equalp (nth 1 (nth 1 (assoc 25 tabla))) iksOks) t)
                         (and (if (equalp (nth 0 (nth 1 (assoc 30 tabla))) iksOks) t))))))
                                      (setq poeni (+ poeni 2)))
  (return-from Trojka2 poeni)
  )



(defun dijagonalaIstiNivo1Sest (a poeni iksOks tabla i)
  (cond ((= i a) (setq poeni poeni))
       (t (progn (if (and (if (equalp (nth i (nth 1 (assoc 5 tabla))) iksOks) t)
           (and (if (equalp (nth i (nth 1 (assoc 10 tabla))) iksOks) t)
              (and (if (equalp (nth i (nth 1 (assoc 15 tabla))) iksOks) t)
                   (and (if (equalp (nth i (nth 1 (assoc 20 tabla))) iksOks) t)
                        (and (if (equalp (nth i (nth 1 (assoc 25 tabla))) iksOks) t)
                             (if (equalp (nth i (nth 1 (assoc 30 tabla))) iksOks) t))))))
                     (setq poeni (+ poeni 3))
                   (if (and (if (equalp (nth i (nth 1 (assoc 5 tabla))) iksOks) t)
           (and (if (equalp (nth i (nth 1 (assoc 10 tabla))) iksOks) t)
               (and (if (equalp (nth i (nth 1 (assoc 15 tabla))) iksOks) t)
                    (and (if (equalp (nth i (nth 1 (assoc 20 tabla))) iksOks) t)
                         (if (equalp (nth i (nth 1 (assoc 25 tabla))) iksOks) t)))))
                       (setq poeni (+ poeni 2))
                       (if (and (if (equalp (nth i (nth 1 (assoc 10 tabla))) iksOks) t)
           (and (if (equalp (nth i (nth 1 (assoc 15 tabla))) iksOks) t)
               (and (if (equalp (nth i (nth 1 (assoc 20 tabla))) iksOks) t)
                    (and (if (equalp (nth i (nth 1 (assoc 25 tabla))) iksOks) t)
                         (and (if (equalp (nth i (nth 1 (assoc 30 tabla))) iksOks) t))))))
                           (setq poeni (+ poeni 2))
                                 (if (and (if (equalp (nth i (nth 1 (assoc 5 tabla))) iksOks) t)
           (and (if (equalp (nth i (nth 1 (assoc 10 tabla))) iksOks) t)
               (and (if (equalp (nth i (nth 1 (assoc 15 tabla))) iksOks) t)
                    (if (equalp (nth i (nth 1 (assoc 20 tabla))) iksOks) t))))
                                     (setq poeni (+ poeni 1))
                                   (if (and (if (equalp (nth i (nth 1 (assoc 10 tabla))) iksOks) t)
           (and (if (equalp (nth i (nth 1 (assoc 15 tabla))) iksOks) t)
               (and (if (equalp (nth i (nth 1 (assoc 20 tabla))) iksOks) t)
                    (if (equalp (nth i (nth 1 (assoc 25 tabla))) iksOks) t))))
                                       (setq poeni (+ poeni 1))                                     
  (if (and (if (equalp (nth i (nth 1 (assoc 15 tabla))) iksOks) t)
           (and (if (equalp (nth i (nth 1 (assoc 20 tabla))) iksOks) t)
               (and (if (equalp (nth i (nth 1 (assoc 25 tabla))) iksOks) t)
                    (if (equalp (nth i (nth 1 (assoc 30 tabla))) iksOks) t))))
      (setq poeni (+ poeni 1))))))))
            (dijagonalaIstiNivo1Sest a poeni iksOks tabla (+ i 1))))))


(defun dijagonalaIstiNivo2Sest (a poeni iksOks tabla i)
  (cond ((= i a) (setq poeni poeni))
        (t (progn
       (if (and (if (equalp (nth i (nth 1 (assoc 0 tabla))) iksOks) t)
           (and (if (equalp (nth i (nth 1 (assoc 7 tabla))) iksOks) t)
              (and (if (equalp (nth i (nth 1 (assoc 14 tabla))) iksOks) t)
                   (and (if (equalp (nth i (nth 1 (assoc 21 tabla))) iksOks) t)
                        (and (if (equalp (nth i (nth 1 (assoc 2 tabla))) iksOks) t)
                             (if (equalp (nth i (nth 1 (assoc 35 tabla))) iksOks) t))))))
           (setq poeni (+ poeni 3))
           (if (and (if (equalp (nth i (nth 1 (assoc 7 tabla))) iksOks) t)
           (and (if (equalp (nth i (nth 1 (assoc 14 tabla))) iksOks) t)
               (and (if (equalp (nth i (nth 1 (assoc 21 tabla))) iksOks) t)
                    (and (if (equalp (nth i (nth 1 (assoc 28 tabla))) iksOks) t)
                         (and (if (equalp (nth i (nth 1 (assoc 35 tabla))) iksOks) t))))))
               (setq poeni (+ poeni 2))
               (if (and (if (equalp (nth i (nth 1 (assoc 0 tabla))) iksOks) t)
           (and (if (equalp (nth i (nth 1 (assoc 7 tabla))) iksOks) t)
               (and (if (equalp (nth i (nth 1 (assoc 14 tabla))) iksOks) t)
                    (and (if (equalp (nth i (nth 1 (assoc 21 tabla))) iksOks) t)
                         (if (equalp (nth i (nth 1 (assoc 28 tabla))) iksOks) t)))))
                   (setq poeni (+ poeni 2))
                         (if (and (if (equalp (nth i (nth 1 (assoc 0 tabla))) iksOks) t)
           (and (if (equalp (nth i (nth 1 (assoc 7 tabla))) iksOks) t)
               (and (if (equalp (nth i (nth 1 (assoc 14 tabla))) iksOks) t)
                    (if (equalp (nth i (nth 1 (assoc 21 tabla))) iksOks) t))))
                             (setq poeni (+ poeni 1))
                             (if (and (if (equalp (nth i (nth 1 (assoc 7 tabla))) iksOks) t)
           (and (if (equalp (nth i (nth 1 (assoc 14 tabla))) iksOks) t)
               (and (if (equalp (nth i (nth 1 (assoc 21 tabla))) iksOks) t)
                    (if (equalp (nth i (nth 1 (assoc 28 tabla))) iksOks) t))))
                                 (setq poeni (+ poeni 1))
                                 (if (and (if (equalp (nth i (nth 1 (assoc 14 tabla))) iksOks) t)
           (and (if (equalp (nth i (nth 1 (assoc 21 tabla))) iksOks) t)
               (and (if (equalp (nth i (nth 1 (assoc 28 tabla))) iksOks) t)
                    (if (equalp (nth i (nth 1 (assoc 35 tabla))) iksOks) t))))
                                     (setq poeni (+ poeni 1))))))))
             (dijagonalaIstiNivo2Sest a poeni iksOks tabla (+ i 1))))))


(defun redIstiNivo1Sest (a poeni iksOks tabla i j)
  (cond ( (and (= a i) (= a j)) (setq poeni poeni))
        (t (progn 
             (if (and (if (equalp (nth j (nth 1 (assoc (* i a) tabla))) iksOks) t)
            (and (if (equalp (nth j (nth 1 (assoc (+ (* i a) 1) tabla))) iksOks) t)
                (and (if (equalp (nth j (nth 1 (assoc (+ (* i a) 2) tabla))) iksOks) t)
                     (and (if (equalp (nth j (nth 1 (assoc (+ (* i a) 3) tabla))) iksOks) t)
                          (and (if (equalp (nth j (nth 1 (assoc (+ (* i a) 4) tabla))) iksOks) t)
                              (if (equalp (nth j (nth 1 (assoc (+ (* i a) 5) tabla))) iksOks) t))))))
            (setq poeni (+ poeni 3))
                  (if (and (if (equalp (nth j (nth 1 (assoc (* i a) tabla))) iksOks) t)
            (and (if (equalp (nth j (nth 1 (assoc (+ (* i a) 1) tabla))) iksOks) t)
                (and (if (equalp (nth j (nth 1 (assoc (+ (* i a) 2) tabla))) iksOks) t)
                     (and (if (equalp (nth j (nth 1 (assoc (+ (* i a) 3) tabla))) iksOks) t)
                        (if (equalp (nth j (nth 1 (assoc (+ (* i a) 4) tabla))) iksOks) t)))))
                      (setq poeni (+ poeni 2))
                            (if (and (if (equalp (nth j (nth 1 (assoc (+ (* i a) 1) tabla))) iksOks) t)
            (and (if (equalp (nth j (nth 1 (assoc (+ (* i a) 2) tabla))) iksOks) t)
                (and (if (equalp (nth j (nth 1 (assoc (+ (* i a) 3) tabla))) iksOks) t)
                     (and (if (equalp (nth j (nth 1 (assoc (+ (* i a) 4) tabla))) iksOks) t)
                        (if (equalp (nth j (nth 1 (assoc (+ (* i a) 5) tabla))) iksOks) t)))))
                                (setq poeni (+ poeni 2))
                                      (if (and (if (equalp (nth j (nth 1 (assoc (* i a) tabla))) iksOks) t)
            (and (if (equalp (nth j (nth 1 (assoc (+ (* i a) 1) tabla))) iksOks) t)
                (and (if (equalp (nth j (nth 1 (assoc (+ (* i a) 2) tabla))) iksOks) t)
                   (if (equalp (nth j (nth 1 (assoc (+ (* i a) 3) tabla))) iksOks) t))))
                                          (setq poeni (+ poeni 1))
                                                 (if (and (if (equalp (nth j (nth 1 (assoc (+ (* i a) 1)tabla))) iksOks) t)
            (and (if (equalp (nth j (nth 1 (assoc (+ (* i a) 2) tabla))) iksOks) t)
                (and (if (equalp (nth j (nth 1 (assoc (+ (* i a) 3) tabla))) iksOks) t)
                   (if (equalp (nth j (nth 1 (assoc (+ (* i a) 4) tabla))) iksOks) t))))
                                                     (setq poeni (+ poeni 1))
                                                            (if (and (if (equalp (nth j (nth 1 (assoc (+ (* i a) 2) tabla))) iksOks) t)
            (and (if (equalp (nth j (nth 1 (assoc (+ (* i a) 3) tabla))) iksOks) t)
                (and (if (equalp (nth j (nth 1 (assoc (+ (* i a) 4) tabla))) iksOks) t)
                   (if (equalp (nth j (nth 1 (assoc (+ (* i a) 5) tabla))) iksOks) t))))
                                                                (setq poeni (+ poeni 1))))))))
             (if (= a i)
                 (redIstiNivo1Sest a poeni iksOks tabla (setq i 0) (+ j 1))
               (redIstiNivo1Sest a poeni iksOks tabla (+ i 1) j))))))


(defun redIstiNivo2Sest (a poeni iksOks tabla i j)
  (cond ( (and (= a i) (= a j)) (setq poeni poeni))
        (t (progn 
        (if (and (if (equalp (nth j (nth 1 (assoc i tabla))) iksOks) t)
            (and (if (equalp (nth j (nth 1 (assoc (+ i 6) tabla))) iksOks) t)
                (and (if (equalp (nth j (nth 1 (assoc (+ i 12) tabla))) iksOks) t)
                     (and (if (equalp (nth j (nth 1 (assoc (+ i 18) tabla))) iksOks) t)
                          (and (if (equalp (nth j (nth 1 (assoc (+ i 24) tabla))) iksOks) t)
                              (if (equalp (nth j (nth 1 (assoc (+ i 30) tabla))) iksOks) t))))))
            (setq poeni (+ poeni 3))
                  (if (and (if (equalp (nth j (nth 1 (assoc i tabla))) iksOks) t)
            (and (if (equalp (nth j (nth 1 (assoc (+ i 6) tabla))) iksOks) t)
                (and (if (equalp (nth j (nth 1 (assoc (+ i 12) tabla))) iksOks) t)
                     (and (if (equalp (nth j (nth 1 (assoc (+ i 18) tabla))) iksOks) t)
                        (if (equalp (nth j (nth 1 (assoc (+ i 24) tabla))) iksOks) t)))))
                      (setq poeni (+ poeni 2))
                            (if (and (if (equalp (nth j (nth 1 (assoc (+ i 6) tabla))) iksOks) t)
            (and (if (equalp (nth j (nth 1 (assoc (+ i 12) tabla))) iksOks) t)
                (and (if (equalp (nth j (nth 1 (assoc (+ i 18) tabla))) iksOks) t)
                     (and (if (equalp (nth j (nth 1 (assoc (+ i 24) tabla))) iksOks) t)
                        (if (equalp (nth j (nth 1 (assoc (+ i 30) tabla))) iksOks) t)))))
                                (setq poeni (+ poeni 2))
                                      (if (and (if (equalp (nth j (nth 1 (assoc i tabla))) iksOks) t)
            (and (if (equalp (nth j (nth 1 (assoc (+ i 6) tabla))) iksOks) t)
                (and (if (equalp (nth j (nth 1 (assoc (+ i 12) tabla))) iksOks) t)
                   (if (equalp (nth j (nth 1 (assoc (+ i 18) tabla))) iksOks) t))))
                                        (setq poeni (+ poeni 1))                                     
        (if (and (if (equalp (nth j (nth 1 (assoc (+ i 6) tabla))) iksOks) t)
            (and (if (equalp (nth j (nth 1 (assoc (+ i 12) tabla))) iksOks) t)
                (and (if (equalp (nth j (nth 1 (assoc (+ i 18) tabla))) iksOks) t)
                   (if (equalp (nth j (nth 1 (assoc (+ i 24) tabla))) iksOks) t))))
            (setq poeni (+ poeni 1))
                  (if (and (if (equalp (nth j (nth 1 (assoc (+ i 12) tabla))) iksOks) t)
            (and (if (equalp (nth j (nth 1 (assoc (+ i 18) tabla))) iksOks) t)
                (and (if (equalp (nth j (nth 1 (assoc (+ i 24) tabla))) iksOks) t)
                   (if (equalp (nth j (nth 1 (assoc (+ i 30) tabla))) iksOks) t))))
            (setq poeni (+ poeni 1))))))))
             (if (= a i)
                 (redIstiNivo2Sest a poeni iksOks tabla (setq i 0) (+ j 1))
               (redIstiNivo2Sest a poeni iksOks tabla (+ i 1) j))))))

(defun redDijagonala1Sest (a poeni iksOks tabla i)
  (cond ((= i a) (setq poeni poeni))
        (t (progn (if (and (if (equalp (nth 0 (nth 1 (assoc i tabla))) iksOks) t)
            (and (if (equalp (nth 1 (nth 1 (assoc (+ i 6) tabla))) iksOks) t)
               (and (if (equalp (nth 2 (nth 1 (assoc (+ i 12) tabla))) iksOks) t)
                    (and (if (equalp (nth 3 (nth 1 (assoc (+ i 18) tabla))) iksOks) t)
                         (and (if (equalp (nth 4 (nth 1 (assoc (+ i 24) tabla))) iksOks) t)
                            (if (equalp (nth 5 (nth 1 (assoc (+ i 30) tabla))) iksOks) t))))))
            (setq poeni (+ poeni 3))
                  (if (and (if (equalp (nth 0 (nth 1 (assoc i tabla))) iksOks) t)
            (and (if (equalp (nth 1 (nth 1 (assoc (+ i 6) tabla))) iksOks) t)
               (and (if (equalp (nth 2 (nth 1 (assoc (+ i 12) tabla))) iksOks) t)
                  (if (equalp (nth 3 (nth 1 (assoc (+ i 18) tabla))) iksOks) t))))
                      (setq poeni (+ poeni 1))
                            (if (and (if (equalp (nth 1 (nth 1 (assoc (+ i 6) tabla))) iksOks) t)
            (and (if (equalp (nth 2 (nth 1 (assoc (+ i 12) tabla))) iksOks) t)
               (and (if (equalp (nth 3 (nth 1 (assoc (+ i 18) tabla))) iksOks) t)
                  (if (equalp (nth 4 (nth 1 (assoc (+ i 24) tabla))) iksOks) t))))
                                (setq poeni (+ poeni 1))
                                      (if (and (if (equalp (nth 2 (nth 1 (assoc (+ i 12) tabla))) iksOks) t)
            (and (if (equalp (nth 3 (nth 1 (assoc (+ i 18) tabla))) iksOks) t)
               (and (if (equalp (nth 4 (nth 1 (assoc (+ i 24) tabla))) iksOks) t)
                  (if (equalp (nth 5 (nth 1 (assoc (+ i 30) tabla))) iksOks) t))))
                                          (setq poeni (+ poeni 1))))))
             (redDijagonala1Sest a poeni iksOks tabla (+ i 1))))))

(defun redDijagonala2Sest (a poeni iksOks tabla i)
  (cond ((= i a) (setq poeni poeni))
        (t (progn (if (and (if (equalp (nth 5 (nth 1 (assoc i tabla))) iksOks) t)
            (and (if (equalp (nth 4 (nth 1 (assoc (+ i 6) tabla))) iksOks) t)
               (and (if (equalp (nth 3 (nth 1 (assoc (+ i 12) tabla))) iksOks) t)
                    (and (if (equalp (nth 2 (nth 1 (assoc (+ i 18) tabla))) iksOks) t)
                         (and (if (equalp (nth 1 (nth 1 (assoc (+ i 24) tabla))) iksOks) t)
                            (if (equalp (nth 0 (nth 1 (assoc (+ i 30) tabla))) iksOks) t))))))
            (setq poeni (+ poeni 3))
          (if (and (if (equalp (nth 5 (nth 1 (assoc i tabla))) iksOks) t)
            (and (if (equalp (nth 4 (nth 1 (assoc (+ i 6) tabla))) iksOks) t)
               (and (if (equalp (nth 3 (nth 1 (assoc (+ i 12) tabla))) iksOks) t)
                    (and (if (equalp (nth 2 (nth 1 (assoc (+ i 18) tabla))) iksOks) t)
                       (if (equalp (nth 1 (nth 1 (assoc (+ i 24) tabla))) iksOks) t)))))
              (setq poeni (+ poeni 2))
                    (if (and (if (equalp (nth 4 (nth 1 (assoc (+ i 6) tabla))) iksOks) t)
            (and (if (equalp (nth 3 (nth 1 (assoc (+ i 12) tabla))) iksOks) t)
               (and (if (equalp (nth 2 (nth 1 (assoc (+ i 18) tabla))) iksOks) t)
                    (and (if (equalp (nth 1 (nth 1 (assoc (+ i 24) tabla))) iksOks) t)
                       (if (equalp (nth 0 (nth 1 (assoc (+ i 30) tabla))) iksOks) t)))))
                        (setq poeni (+ poeni 2))
                              (if (and (if (equalp (nth 5 (nth 1 (assoc i tabla))) iksOks) t)
            (and (if (equalp (nth 4 (nth 1 (assoc (+ i 6) tabla))) iksOks) t)
               (and (if (equalp (nth 3 (nth 1 (assoc (+ i 12) tabla))) iksOks) t)
                  (if (equalp (nth 2 (nth 1 (assoc (+ i 18) tabla))) iksOks) t))))
                                  (setq poeni (+ poeni 1))
                                        (if (and (if (equalp (nth 4 (nth 1 (assoc ( + i 6) tabla))) iksOks) t)
            (and (if (equalp (nth 3 (nth 1 (assoc (+ i 12) tabla))) iksOks) t)
               (and (if (equalp (nth 2 (nth 1 (assoc (+ i 18) tabla))) iksOks) t)
                  (if (equalp (nth 1 (nth 1 (assoc (+ i 24) tabla))) iksOks) t))))
                                            (setq poeni (+ poeni 1))
                                                  (if (and (if (equalp (nth 3 (nth 1 (assoc (+ i 12) tabla))) iksOks) t)
            (and (if (equalp (nth 2 (nth 1 (assoc (+ i 18) tabla))) iksOks) t)
               (and (if (equalp (nth 1 (nth 1 (assoc (+ i 24) tabla))) iksOks) t)
                  (if (equalp (nth 0 (nth 1 (assoc (+ i 30) tabla))) iksOks) t))))
            (setq poeni (+ poeni 1))))))))
             (redDijagonala2Sest a poeni iksOks tabla (+ i 1))))))

(defun redIstiDijagonala3Sest (a poeni iksOks tabla i)
  (cond ((= i a) (setq poeni poeni))
        (t (progn 
             (if (and (if (equalp (nth 0 (nth 1 (assoc (* i a) tabla))) iksOks) t)
            (and (if (equalp (nth 1 (nth 1 (assoc (+ (* i a) 1) tabla))) iksOks) t)
               (and (if (equalp (nth 2 (nth 1 (assoc (+ (* i a) 2) tabla))) iksOks) t)
                    (and (if (equalp (nth 3 (nth 1 (assoc (+ (* i a) 3) tabla))) iksOks) t)
                         (and (if (equalp (nth 4 (nth 1 (assoc (+ (* i a) 4) tabla))) iksOks) t)
                            (if (equalp (nth 5 (nth 1 (assoc (+ (* i a) 5) tabla))) iksOks) t))))))
            (setq poeni (+ poeni 3))
                  (if (and (if (equalp (nth 0 (nth 1 (assoc (* i a) tabla))) iksOks) t)
            (and (if (equalp (nth 1 (nth 1 (assoc (+ (* i a) 1) tabla))) iksOks) t)
               (and (if (equalp (nth 2 (nth 1 (assoc (+ (* i a) 2) tabla))) iksOks) t)
                    (and (if (equalp (nth 3 (nth 1 (assoc (+ (* i a) 3) tabla))) iksOks) t)
                       (if (equalp (nth 4 (nth 1 (assoc (+ (* i a) 4) tabla))) iksOks) t)))))
                      (setq poeni (+ poeni 2))
                            (if (and (if (equalp (nth 1 (nth 1 (assoc (+ (* i a) 1) tabla))) iksOks) t)
            (and (if (equalp (nth 2 (nth 1 (assoc (+ (* i a) 2) tabla))) iksOks) t)
               (and (if (equalp (nth 3 (nth 1 (assoc (+ (* i a) 3) tabla))) iksOks) t)
                    (and (if (equalp (nth 4 (nth 1 (assoc (+ (* i a) 4) tabla))) iksOks) t)
                       (if (equalp (nth 5 (nth 1 (assoc (+ (* i a) 5) tabla))) iksOks) t)))))
                                (setq poeni (+ poeni 2))
                                      (if (and (if (equalp (nth 0 (nth 1 (assoc (* i a) tabla))) iksOks) t)
            (and (if (equalp (nth 1 (nth 1 (assoc (+ (* i a) 1) tabla))) iksOks) t)
               (and (if (equalp (nth 2 (nth 1 (assoc (+ (* i a) 2) tabla))) iksOks) t)
                    (if (equalp (nth 3 (nth 1 (assoc (+ (* i a) 3) tabla))) iksOks) t))))
                                          (setq poeni (+ poeni 1))
                                                (if (and (if (equalp (nth 1 (nth 1 (assoc (+ (* i a) 1) tabla))) iksOks) t)
            (and (if (equalp (nth 2 (nth 1 (assoc (+ (* i a) 2) tabla))) iksOks) t)
               (and (if (equalp (nth 3 (nth 1 (assoc (+ (* i a) 3) tabla))) iksOks) t)
                    (if (equalp (nth 4 (nth 1 (assoc (+ (* i a) 4) tabla))) iksOks) t))))
            (setq poeni (+ poeni 1))        (if (and (if (equalp (nth 2 (nth 1 (assoc (+ (* i a) 2) tabla))) iksOks) t)
            (and (if (equalp (nth 3 (nth 1 (assoc (+ (* i a) 3) tabla))) iksOks) t)
               (and (if (equalp (nth 4 (nth 1 (assoc (+ (* i a) 4) tabla))) iksOks) t)
                    (if (equalp (nth 5 (nth 1 (assoc (+ (* i a) 5) tabla))) iksOks) t))))
                                                (setq poeni (+ poeni 1))))))))
             (redIstiDijagonala3Sest a poeni iksOks tabla (+ i 1))))))

(defun redIstiDijagonala4Sest (a poeni iksOks tabla i)
  (cond ((= a i) (setq poeni poeni))
        (t (progn (if (and (if (equalp (nth 5 (nth 1 (assoc (* i a) tabla))) iksOks) t)
            (and (if (equalp (nth 4 (nth 1 (assoc (+ (* i a) 1) tabla))) iksOks) t)
               (and (if (equalp (nth 3 (nth 1 (assoc (+ (* i a) 2) tabla))) iksOks) t)
                    (and (if (equalp (nth 2 (nth 1 (assoc (+ (* i a) 3) tabla))) iksOks) t)
                         (and (if (equalp (nth 1 (nth 1 (assoc (+ (* i a) 4) tabla))) iksOks) t)
                            (if (equalp (nth 0 (nth 1 (assoc (+ (* i a) 5) tabla))) iksOks) t))))))
            (setq poeni (+ poeni 3))
                  (if (and (if (equalp (nth 4 (nth 1 (assoc (+ (* i a) 1) tabla))) iksOks) t)
            (and (if (equalp (nth 3 (nth 1 (assoc (+ (* i a) 2) tabla))) iksOks) t)
               (and (if (equalp (nth 2 (nth 1 (assoc (+ (* i a) 3) tabla))) iksOks) t)
                    (and (if (equalp (nth 1 (nth 1 (assoc (+ (* i a) 4) tabla))) iksOks) t)
                       (if (equalp (nth 0 (nth 1 (assoc (+ (* i a) 5) tabla))) iksOks) t)))))
                      (setq poeni (+ poeni 2))
                    (if (and (if (equalp (nth 5 (nth 1 (assoc (* i a) tabla))) iksOks) t)
            (and (if (equalp (nth 4 (nth 1 (assoc (+ (* i a) 1) tabla))) iksOks) t)
               (and (if (equalp (nth 3 (nth 1 (assoc (+ (* i a) 2) tabla))) iksOks) t)
                    (and (if (equalp (nth 2 (nth 1 (assoc (+ (* i a) 3) tabla))) iksOks) t)
                       (if (equalp (nth 1 (nth 1 (assoc (+ (* i a) 4) tabla))) iksOks) t)))))
                        (setq poeni (+ poeni 2))
                              (if (and (if (equalp (nth 5 (nth 1 (assoc (* i a) tabla))) iksOks) t)
            (and (if (equalp (nth 4 (nth 1 (assoc (+ (* i a) 1) tabla))) iksOks) t)
               (and (if (equalp (nth 3 (nth 1 (assoc (+ (* i a) 2) tabla))) iksOks) t)
                    (if (equalp (nth 2 (nth 1 (assoc (+ (* i a) 3) tabla))) iksOks) t))))
                                  (setq poeni (+ poeni 1))
                                        (if (and (if (equalp (nth 4 (nth 1 (assoc (+ (* i a) 1) tabla))) iksOks) t)
            (and (if (equalp (nth 3 (nth 1 (assoc (+ (* i a) 2) tabla))) iksOks) t)
               (and (if (equalp (nth 2 (nth 1 (assoc (+ (* i a) 3) tabla))) iksOks) t)
                    (if (equalp (nth 1 (nth 1 (assoc (+ (* i a) 4) tabla))) iksOks) t))))
                                            (setq poeni (+ poeni 1))
                                                  (if (and (if (equalp (nth 3 (nth 1 (assoc (+ (* i a) 2) tabla))) iksOks) t)
            (and (if (equalp (nth 2 (nth 1 (assoc (+ (* i a) 3) tabla))) iksOks) t)
               (and (if (equalp (nth 1 (nth 1 (assoc (+ (* i a) 4) tabla))) iksOks) t)
                    (if (equalp (nth 0 (nth 1 (assoc (+ (* i a) 5) tabla))) iksOks) t))))
                                                      (setq poeni (+ poeni 1))))))))
             (redIstiDijagonala4Sest a poeni iksOks tabla (+ i 1))))))

(defun prviNoviSlucaj (a poeni iksOks tabla i)
  (cond ((= i a) (setq poeni poeni))
        (t (progn 
             (if (and (if (equalp (nth 3 (nth 1 (assoc (* i a) tabla))) iksOks) t)
            (and (if (equalp (nth 2 (nth 1 (assoc (+ (* i a) 1) tabla))) iksOks) t)
               (and (if (equalp (nth 1 (nth 1 (assoc (+ (* i a) 2) tabla))) iksOks) t)
                    (if (equalp (nth 0 (nth 1 (assoc (+ (* i a) 3) tabla))) iksOks) t))))
             (setq poeni (+ poeni 1)))
        (if (and (if (equalp (nth 4 (nth 1 (assoc (* i a) tabla))) iksOks) t)
            (and (if (equalp (nth 3 (nth 1 (assoc (+ (* i a) 1) tabla))) iksOks) t)
               (and (if (equalp (nth 2 (nth 1 (assoc (+ (* i a) 2) tabla))) iksOks) t)
                    (if (equalp (nth 1 (nth 1 (assoc (+ (* i a) 3) tabla))) iksOks) t))))
             (setq poeni (+ poeni 1)))
         (if (and (if (equalp (nth 3 (nth 1 (assoc (+ (* i a) 1) tabla))) iksOks) t)
            (and (if (equalp (nth 2 (nth 1 (assoc (+ (* i a) 2) tabla))) iksOks) t)
               (and (if (equalp (nth 1 (nth 1 (assoc (+ (* i a) 3) tabla))) iksOks) t)
                    (if (equalp (nth 0 (nth 1 (assoc (+ (* i a) 4) tabla))) iksOks) t))))
             (setq poeni (+ poeni 1)))
         (if (and (if (equalp (nth 5 (nth 1 (assoc (+ (* i a) 1) tabla))) iksOks) t)
            (and (if (equalp (nth 4 (nth 1 (assoc (+ (* i a) 2) tabla))) iksOks) t)
               (and (if (equalp (nth 3 (nth 1 (assoc (+ (* i a) 3) tabla))) iksOks) t)
                    (if (equalp (nth 2 (nth 1 (assoc (+ (* i a) 4) tabla))) iksOks) t))))
             (setq poeni (+ poeni 1)))
        (if (and (if (equalp (nth 4 (nth 1 (assoc (+ (* i a) 2) tabla))) iksOks) t)
            (and (if (equalp (nth 3 (nth 1 (assoc (+ (* i a) 3) tabla))) iksOks) t)
               (and (if (equalp (nth 2 (nth 1 (assoc (+ (* i a) 4) tabla))) iksOks) t)
                    (if (equalp (nth 1 (nth 1 (assoc (+ (* i a) 5) tabla))) iksOks) t))))
            (setq poeni (+ poeni 1)))
        (if (and (if (equalp (nth 5 (nth 1 (assoc (+ (* i a) 2) tabla))) iksOks) t)
            (and (if (equalp (nth 4 (nth 1 (assoc (+ (* i a) 3) tabla))) iksOks) t)
               (and (if (equalp (nth 3 (nth 1 (assoc (+ (* i a) 4) tabla))) iksOks) t)
                    (if (equalp (nth 2 (nth 1 (assoc (+ (* i a) 5) tabla))) iksOks) t))))
            (setq poeni (+ poeni 1)))
             (prviNoviSlucaj a poeni iksOks tabla (+ i 1)))
           )))


(defun drugiNoviSlucaj (a poeni iksOks tabla i)
  (cond ((= i a) (setq poeni poeni))
        (t (progn
         (if (and (if (equalp (nth 2 (nth 1 (assoc (* i a) tabla))) iksOks) t)
            (and (if (equalp (nth 3 (nth 1 (assoc (+ (* i a) 1) tabla))) iksOks) t)
               (and (if (equalp (nth 4 (nth 1 (assoc (+ (* i a) 2) tabla))) iksOks) t)
                    (if (equalp (nth 5 (nth 1 (assoc (+ (* i a) 3) tabla))) iksOks) t))))
             (setq poeni (+ poeni 1)))
        (if (and (if (equalp (nth 1 (nth 1 (assoc (* i a) tabla))) iksOks) t)
            (and (if (equalp (nth 2 (nth 1 (assoc (+ (* i a) 1) tabla))) iksOks) t)
               (and (if (equalp (nth 3 (nth 1 (assoc (+ (* i a) 2) tabla))) iksOks) t)
                    (if (equalp (nth 4 (nth 1 (assoc (+ (* i a) 3) tabla))) iksOks) t))))
             (setq poeni (+ poeni 1)))
         (if (and (if (equalp (nth 2 (nth 1 (assoc (+ (* i a) 1) tabla))) iksOks) t)
            (and (if (equalp (nth 3 (nth 1 (assoc (+ (* i a) 2) tabla))) iksOks) t)
               (and (if (equalp (nth 4 (nth 1 (assoc (+ (* i a) 3) tabla))) iksOks) t)
                    (if (equalp (nth 5 (nth 1 (assoc (+ (* i a) 4) tabla))) iksOks) t))))
             (setq poeni (+ poeni 1)))
         (if (and (if (equalp (nth 0 (nth 1 (assoc (+ (* i a) 1) tabla))) iksOks) t)
            (and (if (equalp (nth 1 (nth 1 (assoc (+ (* i a) 2) tabla))) iksOks) t)
               (and (if (equalp (nth 2 (nth 1 (assoc (+ (* i a) 3) tabla))) iksOks) t)
                    (if (equalp (nth 3 (nth 1 (assoc (+ (* i a) 4) tabla))) iksOks) t))))
             (setq poeni (+ poeni 1)))
        (if (and (if (equalp (nth 1 (nth 1 (assoc (+ (* i a) 2) tabla))) iksOks) t)
            (and (if (equalp (nth 2 (nth 1 (assoc (+ (* i a) 3) tabla))) iksOks) t)
               (and (if (equalp (nth 3 (nth 1 (assoc (+ (* i a) 4) tabla))) iksOks) t)
                    (if (equalp (nth 4 (nth 1 (assoc (+ (* i a) 5) tabla))) iksOks) t))))
            (setq poeni (+ poeni 1)))
        (if (and (if (equalp (nth 0 (nth 1 (assoc (+ (* i a) 2) tabla))) iksOks) t)
            (and (if (equalp (nth 1 (nth 1 (assoc (+ (* i a) 3) tabla))) iksOks) t)
               (and (if (equalp (nth 2 (nth 1 (assoc (+ (* i a) 4) tabla))) iksOks) t)
                    (if (equalp (nth 3 (nth 1 (assoc (+ (* i a) 5) tabla))) iksOks) t))))
            (setq poeni (+ poeni 1)))
             (drugiNoviSlucaj a poeni iksOks tabla (+ i 1)))
        ))
  )

(defun treciNoviSlucaj (a poeni iksOks tabla i)
  (cond ((= i a) (setq poeni poeni))
        (t (progn

         (if (and (if (equalp (nth 2 (nth 1 (assoc (+ 0 i) tabla))) iksOks) t)
            (and (if (equalp (nth 3 (nth 1 (assoc (+ 6 i) tabla))) iksOks) t)
               (and (if (equalp (nth 4 (nth 1 (assoc (+ 12 i) tabla))) iksOks) t)
                    (if (equalp (nth 5 (nth 1 (assoc (+ 18 i) tabla))) iksOks) t))))
             (setq poeni (+ poeni 1)))
        (if (and (if (equalp (nth 1 (nth 1 (assoc (+ 0 i) tabla))) iksOks) t)
            (and (if (equalp (nth 2 (nth 1 (assoc (+ 6 i) tabla))) iksOks) t)
               (and (if (equalp (nth 3 (nth 1 (assoc (+ 12 i) tabla))) iksOks) t)
                    (if (equalp (nth 4 (nth 1 (assoc (+ (* i a) 3) tabla))) iksOks) t))))
             (setq poeni (+ poeni 1)))
         (if (and (if (equalp (nth 2 (nth 1 (assoc (+ 6 i) tabla))) iksOks) t)
            (and (if (equalp (nth 3 (nth 1 (assoc (+ 12 i) tabla))) iksOks) t)
               (and (if (equalp (nth 4 (nth 1 (assoc (+ 18 i) tabla))) iksOks) t)
                    (if (equalp (nth 5 (nth 1 (assoc (+ 24 i) tabla))) iksOks) t))))
             (setq poeni (+ poeni 1)))
         (if (and (if (equalp (nth 0 (nth 1 (assoc (+ 6 i) tabla))) iksOks) t)
            (and (if (equalp (nth 1 (nth 1 (assoc (+ 12 i) tabla))) iksOks) t)
               (and (if (equalp (nth 2 (nth 1 (assoc (+ 18 i) tabla))) iksOks) t)
                    (if (equalp (nth 3 (nth 1 (assoc (+ 24 i) tabla))) iksOks) t))))
             (setq poeni (+ poeni 1)))
        (if (and (if (equalp (nth 1 (nth 1 (assoc (+ 12 i) tabla))) iksOks) t)
            (and (if (equalp (nth 2 (nth 1 (assoc (+ 18 i) tabla))) iksOks) t)
               (and (if (equalp (nth 3 (nth 1 (assoc (+ 24 i) tabla))) iksOks) t)
                    (if (equalp (nth 4 (nth 1 (assoc (+ 30 i) tabla))) iksOks) t))))
            (setq poeni (+ poeni 1)))
        (if (and (if (equalp (nth 0 (nth 1 (assoc (+ 12 i) tabla))) iksOks) t)
            (and (if (equalp (nth 1 (nth 1 (assoc (+ 18 i) tabla))) iksOks) t)
               (and (if (equalp (nth 2 (nth 1 (assoc (+ 24 i) tabla))) iksOks) t)
                    (if (equalp (nth 3 (nth 1 (assoc (+ 30 i) tabla))) iksOks) t))))
             (setq poeni (+ poeni 1)))
        (treciNoviSlucaj a poeni iksOks tabla (+ i 1)))
        ))
  )

(defun cetvrtiNoviSlucaj (a poeni iksOks tabla i)
  (cond ((= i a) (setq poeni poeni))
        (t (progn
         (if (and (if (equalp (nth 3 (nth 1 (assoc (+ 0 i) tabla))) iksOks) t)
            (and (if (equalp (nth 2 (nth 1 (assoc (+ 6 i) tabla))) iksOks) t)
               (and (if (equalp (nth 1 (nth 1 (assoc (+ 12 i) tabla))) iksOks) t)
                    (if (equalp (nth 0 (nth 1 (assoc (+ 18 i) tabla))) iksOks) t))))
             (setq poeni (+ poeni 1)))
        (if (and (if (equalp (nth 4 (nth 1 (assoc (+ 0 i) tabla))) iksOks) t)
            (and (if (equalp (nth 3 (nth 1 (assoc (+ 6 i) tabla))) iksOks) t)
               (and (if (equalp (nth 2 (nth 1 (assoc (+ 12 i) tabla))) iksOks) t)
                    (if (equalp (nth 1 (nth 1 (assoc (+ (* i a) 3) tabla))) iksOks) t))))
             (setq poeni (+ poeni 1)))
         (if (and (if (equalp (nth 3 (nth 1 (assoc (+ 6 i) tabla))) iksOks) t)
            (and (if (equalp (nth 2 (nth 1 (assoc (+ 12 i) tabla))) iksOks) t)
               (and (if (equalp (nth 1 (nth 1 (assoc (+ 18 i) tabla))) iksOks) t)
                    (if (equalp (nth 0 (nth 1 (assoc (+ 24 i) tabla))) iksOks) t))))
             (setq poeni (+ poeni 1)))
         (if (and (if (equalp (nth 5 (nth 1 (assoc (+ 6 i) tabla))) iksOks) t)
            (and (if (equalp (nth 4 (nth 1 (assoc (+ 12 i) tabla))) iksOks) t)
               (and (if (equalp (nth 3 (nth 1 (assoc (+ 18 i) tabla))) iksOks) t)
                    (if (equalp (nth 2 (nth 1 (assoc (+ 24 i) tabla))) iksOks) t))))
             (setq poeni (+ poeni 1)))
        (if (and (if (equalp (nth 4 (nth 1 (assoc (+ 12 i) tabla))) iksOks) t)
            (and (if (equalp (nth 3 (nth 1 (assoc (+ 18 i) tabla))) iksOks) t)
               (and (if (equalp (nth 2 (nth 1 (assoc (+ 24 i) tabla))) iksOks) t)
                    (if (equalp (nth 1 (nth 1 (assoc (+ 30 i) tabla))) iksOks) t))))
            (setq poeni (+ poeni 1)))
        (if (and (if (equalp (nth 5 (nth 1 (assoc (+ 12 i) tabla))) iksOks) t)
                 (and (if (equalp (nth 4 (nth 1 (assoc (+ 18 i) tabla))) iksOks) t)
               (and (if (equalp (nth 3 (nth 1 (assoc (+ 24 i) tabla))) iksOks) t)
                    (if (equalp (nth 2 (nth 1 (assoc (+ 30 i) tabla))) iksOks) t))))
             (setq poeni (+ poeni 1)))
        (cetvrtiNoviSlucaj a poeni iksOks tabla (+ i 1)))
        ))
  )

(defun petiNoviSlucaj (a poeni iksOks tabla)

         (if (and (if (equalp (nth 2 (nth 1 (assoc 0 tabla))) iksOks) t)
            (and (if (equalp (nth 3 (nth 1 (assoc 7 tabla))) iksOks) t)
               (and (if (equalp (nth 4 (nth 1 (assoc 14 tabla))) iksOks) t)
                    (if (equalp (nth 5 (nth 1 (assoc 21 tabla))) iksOks) t))))
             (setq poeni (+ poeni 1)))
        (if (and (if (equalp (nth 1 (nth 1 (assoc 0 tabla))) iksOks) t)
            (and (if (equalp (nth 2 (nth 1 (assoc 7 tabla))) iksOks) t)
               (and (if (equalp (nth 3 (nth 1 (assoc 14 tabla))) iksOks) t)
                    (if (equalp (nth 4 (nth 1 (assoc 21 tabla))) iksOks) t))))
             (setq poeni (+ poeni 1)))
         (if (and (if (equalp (nth 2 (nth 1 (assoc 7 tabla))) iksOks) t)
            (and (if (equalp (nth 3 (nth 1 (assoc 14 tabla))) iksOks) t)
               (and (if (equalp (nth 4 (nth 1 (assoc 21 tabla))) iksOks) t)
                    (if (equalp (nth 5 (nth 1 (assoc 28 tabla))) iksOks) t))))
             (setq poeni (+ poeni 1)))
         (if (and (if (equalp (nth 0 (nth 1 (assoc 7 tabla))) iksOks) t)
            (and (if (equalp (nth 1 (nth 1 (assoc 14 tabla))) iksOks) t)
               (and (if (equalp (nth 2 (nth 1 (assoc 21 tabla))) iksOks) t)
                    (if (equalp (nth 3 (nth 1 (assoc 28 tabla))) iksOks) t))))
             (setq poeni (+ poeni 1)))
        (if (and (if (equalp (nth 1 (nth 1 (assoc 14 tabla))) iksOks) t)
            (and (if (equalp (nth 2 (nth 1 (assoc 21 tabla))) iksOks) t)
               (and (if (equalp (nth 3 (nth 1 (assoc 28 tabla))) iksOks) t)
                    (if (equalp (nth 4 (nth 1 (assoc 35 tabla))) iksOks) t))))
            (setq poeni (+ poeni 1)))
        (if (and (if (equalp (nth 0 (nth 1 (assoc 14 tabla))) iksOks) t)
                 (and (if (equalp (nth 1 (nth 1 (assoc 21 tabla))) iksOks) t)
               (and (if (equalp (nth 2 (nth 1 (assoc 28 tabla))) iksOks) t)
                    (if (equalp (nth 3 (nth 1 (assoc 35 tabla))) iksOks) t))))
             (setq poeni (+ poeni 1)))
        (return-from petiNoviSlucaj poeni)
  )


(defun sestiNoviSlucaj (a poeni iksOks tabla)

         (if (and (if (equalp (nth 3 (nth 1 (assoc 0 tabla))) iksOks) t)
            (and (if (equalp (nth 2 (nth 1 (assoc 7 tabla))) iksOks) t)
               (and (if (equalp (nth 1 (nth 1 (assoc 14 tabla))) iksOks) t)
                    (if (equalp (nth 0 (nth 1 (assoc 21 tabla))) iksOks) t))))
             (setq poeni (+ poeni 1)))
        (if (and (if (equalp (nth 4 (nth 1 (assoc 0 tabla))) iksOks) t)
            (and (if (equalp (nth 3 (nth 1 (assoc 7 tabla))) iksOks) t)
               (and (if (equalp (nth 2 (nth 1 (assoc 14 tabla))) iksOks) t)
                    (if (equalp (nth 1 (nth 1 (assoc 21 tabla))) iksOks) t))))
             (setq poeni (+ poeni 1)))
         (if (and (if (equalp (nth 3 (nth 1 (assoc 7 tabla))) iksOks) t)
            (and (if (equalp (nth 2 (nth 1 (assoc 14 tabla))) iksOks) t)
               (and (if (equalp (nth 1 (nth 1 (assoc 21 tabla))) iksOks) t)
                    (if (equalp (nth 0 (nth 1 (assoc 28 tabla))) iksOks) t))))
             (setq poeni (+ poeni 1)))
         (if (and (if (equalp (nth 5 (nth 1 (assoc 7 tabla))) iksOks) t)
            (and (if (equalp (nth 4 (nth 1 (assoc 14 tabla))) iksOks) t)
               (and (if (equalp (nth 3 (nth 1 (assoc 21 tabla))) iksOks) t)
                    (if (equalp (nth 2 (nth 1 (assoc 28 tabla))) iksOks) t))))
             (setq poeni (+ poeni 1)))
        (if (and (if (equalp (nth 4 (nth 1 (assoc 14 tabla))) iksOks) t)
            (and (if (equalp (nth 3 (nth 1 (assoc 21 tabla))) iksOks) t)
               (and (if (equalp (nth 2 (nth 1 (assoc 28 tabla))) iksOks) t)
                    (if (equalp (nth 1 (nth 1 (assoc 35 tabla))) iksOks) t))))
            (setq poeni (+ poeni 1)))
        (if (and (if (equalp (nth 5 (nth 1 (assoc 14 tabla))) iksOks) t)
                 (and (if (equalp (nth 4 (nth 1 (assoc 21 tabla))) iksOks) t)
               (and (if (equalp (nth 3 (nth 1 (assoc 28 tabla))) iksOks) t)
                    (if (equalp (nth 2 (nth 1 (assoc 35 tabla))) iksOks) t))))
             (setq poeni (+ poeni 1)))
        (return-from sestiNoviSlucaj poeni)
  )

(defun sedmiNoviSlucaj (a poeni iksOks tabla)

         (if (and (if (equalp (nth 2 (nth 1 (assoc 5 tabla))) iksOks) t)
            (and (if (equalp (nth 3 (nth 1 (assoc 10 tabla))) iksOks) t)
               (and (if (equalp (nth 4 (nth 1 (assoc 15 tabla))) iksOks) t)
                    (if (equalp (nth 5 (nth 1 (assoc 20 tabla))) iksOks) t))))
             (setq poeni (+ poeni 1)))
        (if (and (if (equalp (nth 1 (nth 1 (assoc 5 tabla))) iksOks) t)
            (and (if (equalp (nth 2 (nth 1 (assoc 10 tabla))) iksOks) t)
               (and (if (equalp (nth 3 (nth 1 (assoc 15 tabla))) iksOks) t)
                    (if (equalp (nth 4 (nth 1 (assoc 20 tabla))) iksOks) t))))
             (setq poeni (+ poeni 1)))
         (if (and (if (equalp (nth 2 (nth 1 (assoc 10 tabla))) iksOks) t)
            (and (if (equalp (nth 3 (nth 1 (assoc 15 tabla))) iksOks) t)
               (and (if (equalp (nth 4 (nth 1 (assoc 20 tabla))) iksOks) t)
                    (if (equalp (nth 5 (nth 1 (assoc 25 tabla))) iksOks) t))))
             (setq poeni (+ poeni 1)))
         (if (and (if (equalp (nth 0 (nth 1 (assoc 10 tabla))) iksOks) t)
            (and (if (equalp (nth 1 (nth 1 (assoc 15 tabla))) iksOks) t)
               (and (if (equalp (nth 2 (nth 1 (assoc 20 tabla))) iksOks) t)
                    (if (equalp (nth 3 (nth 1 (assoc 25 tabla))) iksOks) t))))
             (setq poeni (+ poeni 1)))
        (if (and (if (equalp (nth 1 (nth 1 (assoc 15 tabla))) iksOks) t)
            (and (if (equalp (nth 2 (nth 1 (assoc 20 tabla))) iksOks) t)
               (and (if (equalp (nth 3 (nth 1 (assoc 25 tabla))) iksOks) t)
                    (if (equalp (nth 4 (nth 1 (assoc 30 tabla))) iksOks) t))))
            (setq poeni (+ poeni 1)))
        (if (and (if (equalp (nth 0 (nth 1 (assoc 15 tabla))) iksOks) t)
                 (and (if (equalp (nth 1 (nth 1 (assoc 20 tabla))) iksOks) t)
               (and (if (equalp (nth 2 (nth 1 (assoc 25 tabla))) iksOks) t)
                    (if (equalp (nth 3 (nth 1 (assoc 30 tabla))) iksOks) t))))
             (setq poeni (+ poeni 1)))
        (return-from sedmiNoviSlucaj poeni)
  )


(defun osmiNoviSlucaj (a poeni iksOks tabla)

         (if (and (if (equalp (nth 3 (nth 1 (assoc 5 tabla))) iksOks) t)
            (and (if (equalp (nth 2 (nth 1 (assoc 10 tabla))) iksOks) t)
               (and (if (equalp (nth 1 (nth 1 (assoc 15 tabla))) iksOks) t)
                    (if (equalp (nth 0 (nth 1 (assoc 20 tabla))) iksOks) t))))
             (setq poeni (+ poeni 1)))
        (if (and (if (equalp (nth 4 (nth 1 (assoc 5 tabla))) iksOks) t)
            (and (if (equalp (nth 3 (nth 1 (assoc 10 tabla))) iksOks) t)
               (and (if (equalp (nth 2 (nth 1 (assoc 15 tabla))) iksOks) t)
                    (if (equalp (nth 1 (nth 1 (assoc 20 tabla))) iksOks) t))))
             (setq poeni (+ poeni 1)))
         (if (and (if (equalp (nth 3 (nth 1 (assoc 10 tabla))) iksOks) t)
            (and (if (equalp (nth 2 (nth 1 (assoc 15 tabla))) iksOks) t)
               (and (if (equalp (nth 1 (nth 1 (assoc 20 tabla))) iksOks) t)
                    (if (equalp (nth 0 (nth 1 (assoc 25 tabla))) iksOks) t))))
             (setq poeni (+ poeni 1)))
         (if (and (if (equalp (nth 5 (nth 1 (assoc 10 tabla))) iksOks) t)
            (and (if (equalp (nth 4 (nth 1 (assoc 15 tabla))) iksOks) t)
               (and (if (equalp (nth 3 (nth 1 (assoc 20 tabla))) iksOks) t)
                    (if (equalp (nth 2 (nth 1 (assoc 25 tabla))) iksOks) t))))
             (setq poeni (+ poeni 1)))
        (if (and (if (equalp (nth 4 (nth 1 (assoc 115 tabla))) iksOks) t)
            (and (if (equalp (nth 3 (nth 1 (assoc 20 tabla))) iksOks) t)
               (and (if (equalp (nth 2 (nth 1 (assoc 25 tabla))) iksOks) t)
                    (if (equalp (nth 1 (nth 1 (assoc 30 tabla))) iksOks) t))))
            (setq poeni (+ poeni 1)))
        (if (and (if (equalp (nth 5 (nth 1 (assoc 15 tabla))) iksOks) t)
                 (and (if (equalp (nth 4 (nth 1 (assoc 20 tabla))) iksOks) t)
               (and (if (equalp (nth 3 (nth 1 (assoc 25 tabla))) iksOks) t)
                    (if (equalp (nth 2 (nth 1 (assoc 30 tabla))) iksOks) t))))
             (setq poeni (+ poeni 1)))
        (return-from osmiNoviSlucaj poeni)
  )

;POENI ZA CETIRI
(defun proveraRezultataCetiri (a tabla poeni iksOks list)
  
       (setq poeni(jedanStubic a 0 tabla poeni list))
       (setq poeni (dijagonalnoRazlicitiNivoPetica1 a poeni iksOks tabla))
       (setq poeni (dijagonalnoRazlicitiNivoPetica2 a poeni iksOks tabla))
       (setq poeni (dijagonalnoRazlicitiNivoTrojka1 a poeni iksOks tabla))
       (setq poeni (dijagonalnoRazlicitiNivoTrojka2 a poeni iksOks tabla))
       (setq poeni (dijagonalaIstiNivo1 a poeni iksOks tabla 0))
       (setq poeni (dijagonalaIstiNivo2 a poeni iksOks tabla 0))
       (setq poeni (redIstiNivo1 a poeni iksOks tabla 0 0))
       (setq poeni (redIstiNivo2 a poeni iksOks tabla 0 0 ))
       (setq poeni (redDijagonala1 a poeni iksOks tabla 0))
       (setq poeni (redDijagonala2 a poeni iksOks tabla 0))
       (setq poeni (redIstiDijagonala3 a poeni iksOks tabla 0))
       (setq poeni (redIstiDijagonala4 a poeni iksOks tabla 0))
  (return-from proveraRezultataCetiri poeni)
  )

(defun dijagonalnoRazlicitiNivoPetica1(a poeni iksOks tabla)
   (if (and (if (equalp (nth 0 (nth 1 (assoc 0 tabla))) iksOks) t)
           (and (if (equalp (nth 1 (nth 1 (assoc 5 tabla))) iksOks) t)
               (and (if (equalp (nth 2 (nth 1 (assoc 10 tabla))) iksOks) t)
                    (if (equalp (nth 3 (nth 1 (assoc 15 tabla))) iksOks) t))))
       (setq poeni (+ poeni 1)))
  (return-from dijagonalnoRazlicitiNivoPetica1 poeni)
  )

(defun dijagonalnoRazlicitiNivoPetica2(a poeni iksOks tabla)
  (if (and (if (equalp (nth 3 (nth 1 (assoc 0 tabla))) iksOks) t)
           (and (if (equalp (nth 2 (nth 1 (assoc 5 tabla))) iksOks) t)
               (and (if (equalp (nth 1 (nth 1 (assoc 10 tabla))) iksOks) t)
                    (if (equalp (nth 0 (nth 1 (assoc 15 tabla))) iksOks) t))))
      (setq poeni (+ poeni 1)))
  (return-from dijagonalnoRazlicitiNivoPetica2 poeni)
  )

(defun dijagonalnoRazlicitiNivoTrojka1(a poeni iksOks tabla)
  (if (and (if (equalp (nth 0 (nth 1 (assoc 3 tabla))) iksOks) t)
           (and (if (equalp (nth 1 (nth 1 (assoc 6 tabla))) iksOks) t)
               (and (if (equalp (nth 2 (nth 1 (assoc 9 tabla))) iksOks) t)
                    (if (equalp (nth 3 (nth 1 (assoc 12 tabla))) iksOks) t))))
      (setq poeni (+ poeni 1)))
  (return-from dijagonalnoRazlicitiNivoTrojka1 poeni)
  )

(defun dijagonalnoRazlicitiNivoTrojka2(a poeni iksOks tabla)
    (if (and (if (equalp (nth 3 (nth 1 (assoc 3 tabla))) iksOks) t)
           (and (if (equalp (nth 2 (nth 1 (assoc 6 tabla))) iksOks) t)
               (and (if (equalp (nth 1 (nth 1 (assoc 9 tabla))) iksOks) t)
                    (if (equalp (nth 0 (nth 1 (assoc 12 tabla))) iksOks) t))))
        (setq poeni (+ poeni 1)))
  (return-from dijagonalnoRazlicitiNivoTrojka2 poeni)
  )

(defun dijagonalaIstiNivo1(a poeni iksOks tabla i)
  (cond ( (= i a) (setq poeni poeni))
       (t (progn (if (and (if (equalp (nth i (nth 1 (assoc 3 tabla))) iksOks) t)
           (and (if (equalp (nth i (nth 1 (assoc 6 tabla))) iksOks) t)
              (and (if (equalp (nth i (nth 1 (assoc 9 tabla))) iksOks) t)
                   (if (equalp (nth i (nth 1 (assoc 12 tabla))) iksOks) t))))
                     (dijagonalaIstiNivo1 a (setq poeni ( + poeni 1)) iksOks tabla (+ i 1))
                     (dijagonalaIstiNivo1 a poeni iksOks tabla (+ i 1)))))))

(defun dijagonalaIstiNivo2(a poeni iksOks tabla i)
  (cond ( (= i a) (setq poeni poeni))
       (t (progn (if (and (if (equalp (nth i (nth 1 (assoc 0 tabla))) iksOks) t)
           (and (if (equalp (nth i (nth 1 (assoc 5 tabla))) iksOks) t)
               (and (if (equalp (nth i (nth 1 (assoc 10 tabla))) iksOks) t)
                    (if (equalp (nth i (nth 1 (assoc 15 tabla))) iksOks) t))))
                     (dijagonalaIstiNivo2 a (setq poeni ( + poeni 1)) iksOks tabla (+ i 1))
                   (dijagonalaIstiNivo2 a poeni iksOks tabla (+ i 1)))))))

(defun redIstiNivo1 (a poeni iksOks tabla i j)
  (cond ( (and (= a i) (= a j)) (setq poeni poeni))
        (t (progn
        (if (and (if (equalp (nth j (nth 1 (assoc (* i a) tabla))) iksOks) t)
            (and (if (equalp (nth j (nth 1 (assoc (+ (* i a) 1) tabla))) iksOks) t)
                (and (if (equalp (nth j (nth 1 (assoc (+ (* i a) 2) tabla))) iksOks) t)
                     (if (equalp (nth j (nth 1 (assoc (+ (* i a) 3) tabla))) iksOks) t))))
               (if (= a i)
                   (redIstiNivo1 a (setq poeni ( + poeni 1)) iksOks tabla (setq i 0) (+ j 1))
                   (redIstiNivo1 a (setq poeni ( + poeni 1)) iksOks tabla (+ i 1) j))
             (if (= a i)
                   (redIstiNivo1 a poeni iksOks tabla (setq i 0) (+ j 1))
                   (redIstiNivo1 a poeni iksOks tabla (+ i 1) j)))))))

(defun redIstiNivo2 (a poeni iksOks tabla i j)
  (cond ( (and (= a i) (= a j)) (setq poeni poeni))
        (t (progn
           (if (and (if (equalp (nth j (nth 1 (assoc i tabla))) iksOks) t)
           (and (if (equalp (nth j (nth 1 (assoc (+ i 4) tabla))) iksOks) t)
               (and (if (equalp (nth j (nth 1 (assoc (+ i 8) tabla))) iksOks) t)
                    (if (equalp (nth j (nth 1 (assoc (+ i 12) tabla))) iksOks) t))))
               (if (= a i)
                   (redIstiNivo2 a (setq poeni ( + poeni 1)) iksOks tabla (setq i 0) (+ j 1))
                   (redIstiNivo2 a (setq poeni ( + poeni 1)) iksOks tabla (+ i 1) j))
             (if (= a i)
                   (redIstiNivo2 a poeni iksOks tabla (setq i 0) (+ j 1))
                   (redIstiNivo2 a poeni iksOks tabla (+ i 1) j)))))))

(defun redDijagonala1(a poeni iksOks tabla i)
  (cond ((= a i) (setq poeni poeni))
        (t 
         (progn 
        (if (and (if (equalp (nth 0 (nth 1 (assoc i tabla))) iksOks) t)
            (and (if (equalp (nth 1 (nth 1 (assoc (+ i 4) tabla))) iksOks) t)
               (and (if (equalp (nth 2 (nth 1 (assoc (+ i 8) tabla))) iksOks) t)
                    (if (equalp (nth 3 (nth 1 (assoc (+ i 12) tabla))) iksOks) t))))
                 (redDijagonala1 a (setq poeni ( + poeni 1)) iksOks tabla (+ i 1))
               (redDijagonala1 a poeni iksOks tabla (+ i 1)))))))

(defun redDijagonala2(a poeni iksOks tabla i)
  (cond ((= a i) (setq poeni poeni))
        (t 
         (progn 
        (if (and (if (equalp (nth 3 (nth 1 (assoc i tabla))) iksOks) t)
            (and (if (equalp (nth 2 (nth 1 (assoc (+ i 4) tabla))) iksOks) t)
               (and (if (equalp (nth 1 (nth 1 (assoc (+ i 8) tabla))) iksOks) t)
                    (if (equalp (nth 0 (nth 1 (assoc (+ i 12) tabla))) iksOks) t))))
                 (redDijagonala2 a (setq poeni ( + poeni 1)) iksOks tabla (+ i 1))
               (redDijagonala2 a poeni iksOks tabla (+ i 1)))))))

(defun redIstiDijagonala3(a poeni iksOks tabla i)
  (cond ((= a i) (setq poeni poeni))
        (t 
         (progn 
             (if (and (if (equalp (nth 0 (nth 1 (assoc (* i a) tabla))) iksOks) t)
            (and (if (equalp (nth 1 (nth 1 (assoc (+ (* i a) 1) tabla))) iksOks) t)
               (and (if (equalp (nth 2 (nth 1 (assoc (+ (* i a) 2) tabla))) iksOks) t)
                    (if (equalp (nth 3 (nth 1 (assoc (+ (* i a) 3) tabla))) iksOks) t))))
                 (redIstiDijagonala3 a (setq poeni ( + poeni 1)) iksOks tabla (+ i 1))
               (redIstiDijagonala3 a poeni iksOks tabla (+ i 1)))))))


(defun redIstiDijagonala4(a poeni iksOks tabla i)
  (cond ((= a i) (setq poeni poeni))
        (t 
         (progn 
        (if (and (if (equalp (nth 3 (nth 1 (assoc (* i a) tabla))) iksOks) t)
            (and (if (equalp (nth 2 (nth 1 (assoc (+ (* i a) 1) tabla))) iksOks) t)
                (and (if (equalp (nth 1 (nth 1 (assoc (+ (* i a) 2) tabla))) iksOks) t)
                    (if (equalp (nth 0 (nth 1 (assoc (+ (* i a) 3) tabla))) iksOks) t))))
                 (redIstiDijagonala4 a (setq poeni ( + poeni 1)) iksOks tabla (+ i 1))
                 (redIstiDijagonala4 a poeni iksOks tabla (+ i 1)))))))



(defun homogenaLista (c n l)
  (cond ((= 0 n) '())
        (t (append (list c) (homogenaLista c (- n 1) l)))))

(defun jedanStubic (a pocetak tabla poeni lista)
        (cond ((= pocetak  (* a a)) (setq poeni poeni ))
              (t (progn 
                   (if (equal (nth 1 (assoc pocetak tabla)) lista) 
                       (jedanStubic a (+ pocetak 1) tabla (setq poeni ( + poeni 1)) lista)
                     (jedanStubic a (+ pocetak 1) tabla poeni lista)))))) 

(defun sledbenici (tabla a)
  (cond ((null tabla) '())
        (t (progn 
             (if (< (nth 2 (car tabla)) a)
                 (append (list (caar tabla)) (sledbenici (cdr tabla) a))
               (sledbenici (cdr tabla) a))))))





;PRVA FAZA
(defun proveriDimenziju ()
   (if (or (= a 4) (= a 6)) t '()))

(defun dodajElemente (l n)
  (cond ((= 0 n) '())
        (t (append (list '-) (dodajELemente l (- n 1))))))

(defun dodajTablu (tabla i a kolona)
  (cond ((= (* a a) i) '()) 
        (t (progn 
             (setq kolona (dodajElemente kolona a)) 
             (cons (append (list i) (list kolona 0)) (dodajTablu tabla (+ i 1) a kolona))))))




(defun igraj (a v tabla prvi drugi racunar s)
  (if (= 0 v) (format t "~%*-*-*-*-*-*-*~X*-*-*-*-*-*-*" "KRAJ")
    (progn
      (if (= (mod v 2) 0)
          (progn (if (eq racunar prvi) (format t "~%Racunar...~%")) (updateRandomKomp tabla a prvi racunar s))
        (progn (if (eq racunar drugi) (format t "~%Racunar...~%"))(updateRandomKomp tabla a drugi racunar s))
        )
      (crtaj tabla a)
      (igraj a (- v 1) tabla prvi drugi racunar s))))

(defun updateRandomKomp (tabla a iksOks racunar s)
    (setq s (sledbenici tabla a))
  (if (eq racunar iksOks)
      (if (= (length s) 1)
          (setq n (nth 0 s))
        (if (= a 4)
            (setq n (uporediListe tabla (car (min-value tabla 3 t racunar a -1000 1000)) 0))
            (setq n (uporediListe tabla (car (min-value tabla 1 t racunar a -1000 1000)) 0))          
            )
          )
    (progn
      (format t "~%*-*-*-*-*-*-*-*-*-*-*-*-*-*-*-*")
      (format t "~%Unesite potez: ~%")
      (setq n (read))))
      (if (not(numberp n))  
        (setq n (+ (- (char-int (character n)) 65) 10)) t)
  (if (not (member n s))
      (progn
        (if (not (eq racunar iksOks))
        (format t "~%UNELI STE POGRESAN POTEZ! POKUSAJTE PONOVO! ~%"))
        (updateRandomKomp tabla a iksOks racunar s))
    (progn
      (setf (nth 2 (assoc n tabla)) (+ (nth 2 (assoc n tabla)) 1))
      (setf (nth (- a (nth 2 (assoc n tabla))) (cadr (assoc n tabla))) iksOks))))

(defun uporediListe (tabla1 tabla2 i)
  (cond ((= i (length tabla1)) '())
        ((not (equal (nth i tabla1) (nth i tabla2))) (return-from uporediListe (car (nth i tabla2))))
        (t (uporediListe tabla1 tabla2 (+ i 1)))))

(defun updateDvaIgraca (tabla a iksOks racunar s)
  (setq s (sledbenici tabla a ))
  (if (eq racunar iksOks)
      (progn
      (format t "~%Unesite potez racuanra...~%")
      (setq n (read)))
    (progn
      (format t "~%Unesite potez: ~%")
      (setq n (read))
      )
    )
    (if (not(numberp n))  
        (setq n (+ (- (char-int (character n)) 65) 10)) t)
  (if (not (member n s))
      (progn 
        (format t "~%UNELI STE POGRESAN POTEZ! POKUSAJTE PONOVO! ~%")
        (updateDvaIgraca tabla a iksOks racunar s))
    (progn
      (setf (nth 2 (assoc n tabla)) (+ (nth 2 (assoc n tabla)) 1))
      (setf (nth (- a (nth 2 (assoc n tabla))) (cadr (assoc n tabla))) iksOks))))

(defun koordinate (a i)
  (cond ((= (* a a) i) '())
        (t 
         (prog2
           (if (< i 10) (setq l (append  l (list (format t "~@(~X~) " i))))
           (setq l (append  l (list (format t "~@(~X~) " (code-char (+ (- i 10) 65)))))))
           (koordinate a (+ i 1))))))

(defun razmaci (n)
  (cond ((= 0 n) (format t ""))
        (t (prog2
             (format t "~2X " " ")
              (razmaci (- n 1))))))

(defun crticePrvaPolovina (n j tabla i)
    (cond ((= (+ i 1) n) (format t ""))
          (t 
           (prog2 
             (format t "~X " 
               (nth (- n 1) (cadr (assoc (+ j (- n 1)) tabla))))
               (crticePrvaPolovina (+ n 1) j tabla i)))))

(defun crticeDrugaPolovina (n j tabla i a)
    (cond ((= (+ (- (* 2 a) i) 1) n) (format t ""))
          (t 
           (prog2 
             (format t "~X " 
               (nth (- (+ n (- i a) ) 1) (cadr (assoc (+ j (- n 1)) tabla)))) 
               (crticeDrugaPolovina (+ n 1) j tabla i a)))))

(defun crtaj(tabla a)
(setq l '())
      (koordinate a 0)
(format t "~%")
(crtajVrstu tabla a 1)
      (koordinate a 0)
)

(defun crtajVrstu (tabla a i)
  (cond ((= (* 2 a) i) '())
        (t (progn
            (loop for j from (- a i) to  (- (* a  a) 1)
            do
              (if (<= i a)
		(razmaci ( - a i))
                )

              (if (< j 0)
                  (setq j 0)
                )
              (if (<= i a)
		(crticePrvaPolovina 1 j tabla i)
		(crticeDrugaPolovina 1 j tabla i a)
                )
              (if (> i a)
		(razmaci (- i a)))
              (setq j (+ j (- a 1))))
              (format t "~%")
             (crtajVrstu tabla a (+ i 1))))))

;POKRETANJE IGRE
(main)